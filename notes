Rails vs. Django
================
A Journey from Explict to Implicit: I'm not sure this is a real thing I want to focus on...

They are really the "same" thing. A web framwork is a webframework. So I'm
not trying to cause fights. Or really say that one is better than the other.
Same with Ruby and Python they are both Dynamic Object Oriented Languages.
They place that they really start to diverge it with the names that they call
the same stuff.

Naming
------
Should I maybe should examples of all these things?

- Rails vs. Django
- Models vs. Models *** Done
- Controllers vs. Views ***
- Views vs. Templates
- (Html Forms) vs. Forms ***
- (Nothing) vs. Widgets ***
- Migrations vs. Migrations *** Done
- Activerecord vs. Django ORM ?????
- Rack vs. WSGI
- Tasks vs. Commands
- config/routes.rb vs. URLconf *** (All spelled out, no tight idea of resources)
- scopes vs. managers ***
- gems vs. pip
- rbenv + bundler vs. virturalenv + virtualenvwrapper

*** - Things that are maybe worth talking more about.
*** Restfulness


Positive things to take from Python/Django:
-------------------------------------------
(Focus more on these when talking to Rails people.)

1. Coding Standards
- PEP8: A code standard that everyone uses make it easier to pick up a random
pieace of code and read it. One code style that everyone uses

2. Culture of Documentation:
Not just READMEs and class and method autogenerated docs
- readthedocs.com
- Spynix
- Good docs even on small open source projects
- http://docs.writethedocs.org/

3. Imports:
- Always explicit which is amazing
- Imports (Sometime you need to require things but usually not) still don't
  really understand this.
- Imports will error if they are circular which quickly shows you if there is
  something very "wrong" in your code design
- Namespaces
- Alwats for better mocking...

Positive things to take from Rails/Ruby:
----------------------------------------
(Focus more on these when talking to Python people.)

1. Logging
- the logging defaults are amazing all the different log files
- the logging defaults for models are great
- It feels more complicated to get logging set up in a nice way for rails

2. Packaging
gem is so much better than pip (default organization of packadge by where you
want to install them.) So many different ways and instructions to package a gem
vs. one?...

3. Culture of Testing
- This is what everyone talks about. The tooling is soo much better. And its
  more excepted that its important. Etc. I don't know if I really want to say
  much more about that.

4. Functional Programming
- WTF happened to fold

5. Readablity
- long descriptive names
- ex. 1.month.ago
- super

Also
----

Ulimately this talk would be best if I developed the same app both languages and
then talked specfically to that exprience, but that is totally not going to
completely happen in one day.

- Add the end ask for feedback and explain that I'm giving a modidifed version
  of this talk at PyCon Sweden.
